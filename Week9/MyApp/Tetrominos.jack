class Tetrominos {
   static World world;	
   field int x, y;
   field int shapeNumber;
   field Array currentShape;
   field Array shapeMap;
   

   constructor Tetrominos new(int shape_number){
     let shapeNumber = shape_number;
     let x = 0;
     let y = 0;
     let shapeMap = Array.new(16);
     do makePatterns();
     let currentShape = shapeMap;
     return this;
   }
   
   function void newWorld(World worldInstance){
     let world = worldInstance;
     return;
   }

   function Tetrominos spawn(int number){
     var Tetrominos block;
     let block = Tetrominos.new(number);
     do block.drawShape();
     return block;
   }

   method void drawShape(){
     var int dx, dy, idx;

     let idx = 0;
     let dy = y;

     while(dy < (y + 4)) {
       if(~(dy < 1) & ~(dy > 17)) {
         let dx = x;
         while(dx < (x + 4)) {
           if(~(dx < 1) & ~(dx > 32) & (~(currentShape[idx] = 0))) {
             do world.drawSquare(dx,dy);
           }
           let idx = idx + 1;
           let dx = dx + 1;
         }
       } else {
         let idx = idx + 4;
       }
       let dy = dy + 1;
     }
     return;
   }

   method void eraseShape(){
     var int dx, dy, idx;

     let idx = 0;
     let dy = y;

     while(dy < (y + 4)) {
       if(~(dy < 1) & ~(dy > 17)) {
         let dx = x;
         while(dx < (x + 4)) {
           if(~(dx < 1) & ~(dx > 32) & (~(currentShape[idx] = 0))) {
             do world.eraseSquare(dx,dy);
           }
           let idx = idx + 1;
           let dx = dx + 1;
         }
       } else {
         let idx = idx + 4;
       }
       let dy = dy + 1;
     }
     return;
   }

   method void dispose(){
     do currentShape.dispose();
     do shapeMap.dispose();
     do Memory.deAlloc(this);
     return;
   }
   
   method boolean canMove(int dx, int dy){
     var int counterX, counterY, idx;
     let idx = 0;
     let counterY = y + dy;

     while(counterY < (y + dy + 4)) {
       let counterX = x + dx;
       while(counterX < (x + dx + 4)) {
         if(~(currentShape[idx] = 0) & ~world.isEmpty(counterX, counterY)) {
           return false;
         }
         let idx = idx + 1;
         let counterX = counterX + 1;
       }
       let counterY = counterY + 1;
     }

     return true;
   }

   method void stopShape(){
     var int dx, dy, idx;
     let idx = 0;
     let dy = y;

     while(dy < (y + 4)){
       let dx = x;
       while (dx < (x + 4)){
         if (~(currentShape[idx] = 0)){
           do world.placeShape(dx, dy);
         }
         let idx = idx + 1;
         let dx = dx + 1;
         }
       let dy = dy + 1;
     }
     do world.checkForLines();
     do dispose();
     return;
   }

   method void makePatterns(){
     if (shapeNumber = 0){
	//o
       let shapeMap[0] = 0;
       let shapeMap[1] = 1;
       let shapeMap[2] = 1;
       let shapeMap[3] = 0;
       let shapeMap[4] = 0;
       let shapeMap[5] = 1;
       let shapeMap[6] = 1;
       let shapeMap[7] = 0;
       let shapeMap[8] = 0;
       let shapeMap[9] = 0;
       let shapeMap[10] = 0;
       let shapeMap[11] = 0;
       let shapeMap[12] = 0;
       let shapeMap[13] = 0;
       let shapeMap[14] = 0;
       let shapeMap[15] = 0;
       return;
     }
     if (shapeNumber = 1){
	//i
       let shapeMap[0] = 0;
       let shapeMap[1] = 0;
       let shapeMap[2] = 0;
       let shapeMap[3] = 0;
       let shapeMap[4] = 1;
       let shapeMap[5] = 1;
       let shapeMap[6] = 1;
       let shapeMap[7] = 1;
       let shapeMap[8] = 0;
       let shapeMap[9] = 0;
       let shapeMap[10] = 0;
       let shapeMap[11] = 0;
       let shapeMap[12] = 0;
       let shapeMap[13] = 0;
       let shapeMap[14] = 0;
       let shapeMap[15] = 0;
       return;
     }
     if (shapeNumber = 2){
       //s
       let shapeMap[0] = 0;
       let shapeMap[1] = 1;
       let shapeMap[2] = 1;
       let shapeMap[3] = 0;
       let shapeMap[4] = 1;
       let shapeMap[5] = 1;
       let shapeMap[6] = 0;
       let shapeMap[7] = 0;
       let shapeMap[8] = 0;
       let shapeMap[9] = 0;
       let shapeMap[10] = 0;
       let shapeMap[11] = 0;
       let shapeMap[12] = 0;
       let shapeMap[13] = 0;
       let shapeMap[14] = 0;
       let shapeMap[15] = 0;
       return;
     }
     if (shapeNumber = 3){
       //Z
       let shapeMap[0] = 1;
       let shapeMap[1] = 1;
       let shapeMap[2] = 0;
       let shapeMap[3] = 0;
       let shapeMap[4] = 0;
       let shapeMap[5] = 1;
       let shapeMap[6] = 1;
       let shapeMap[7] = 0;
       let shapeMap[8] = 0;
       let shapeMap[9] = 0;
       let shapeMap[10] = 0;
       let shapeMap[11] = 0;
       let shapeMap[12] = 0;
       let shapeMap[13] = 0;
       let shapeMap[14] = 0;
       let shapeMap[15] = 0;
       return;
     }
     if (shapeNumber = 4){
       //L
       let shapeMap[0] = 0;
       let shapeMap[1] = 0;
       let shapeMap[2] = 1;
       let shapeMap[3] = 0;
       let shapeMap[4] = 1;
       let shapeMap[5] = 1;
       let shapeMap[6] = 1;
       let shapeMap[7] = 0;
       let shapeMap[8] = 0;
       let shapeMap[9] = 0;
       let shapeMap[10] = 0;
       let shapeMap[11] = 0;
       let shapeMap[12] = 0;
       let shapeMap[13] = 0;
       let shapeMap[14] = 0;
       let shapeMap[15] = 0;
       return;
     }
     if (shapeNumber = 5){
       //J
       let shapeMap[0] = 1;
       let shapeMap[1] = 0;
       let shapeMap[2] = 0;
       let shapeMap[3] = 0;
       let shapeMap[4] = 1;
       let shapeMap[5] = 1;
       let shapeMap[6] = 1;
       let shapeMap[7] = 0;
       let shapeMap[8] = 0;
       let shapeMap[9] = 0;
       let shapeMap[10] = 0;
       let shapeMap[11] = 0;
       let shapeMap[12] = 0;
       let shapeMap[13] = 0;
       let shapeMap[14] = 0;
       let shapeMap[15] = 0;
       return;
     }
     if (shapeNumber = 6){
       //T
       let shapeMap[0] = 0;
       let shapeMap[1] = 1;
       let shapeMap[2] = 0;
       let shapeMap[3] = 0;
       let shapeMap[4] = 1;
       let shapeMap[5] = 1;
       let shapeMap[6] = 1;
       let shapeMap[7] = 0;
       let shapeMap[8] = 0;
       let shapeMap[9] = 0;
       let shapeMap[10] = 0;
       let shapeMap[11] = 0;
       let shapeMap[12] = 0;
       let shapeMap[13] = 0;
       let shapeMap[14] = 0;
       let shapeMap[15] = 0;
       return;
     }
     return;
   }

   method boolean isGameOver(){
     return ~canMove(0,0);
   }

   method void moveDown(){
     if(canMove(0,1)){
       do eraseShape();
       let y = y + 1;
       do drawShape();
     }
     return;
   }


   method void moveLeft(){
     if(canMove(-1,0)){
       do eraseShape();
       let x = x - 1;
       do drawShape();
     }
     return;
   }

   method void moveRight(){
     if(canMove(1,0)){
       do eraseShape();
       let x = x + 1;
       do drawShape();
     }
     return;
   }

}

