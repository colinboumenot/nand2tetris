// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
field Array string;
field length length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
      let string = Array.new(maxLength);
      let length = 0;
      return this;
    }

    /** Disposes this string. */
    method void dispose() {
      do Memory.deAlloc(this);
      return;
    }

    /** Returns the current length of this string. */
    method int length() {
      return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      return string[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      let string[j] = c;
      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      let string[length] = c;
      let length = length + 1;
      return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      let string[length - 1] = null;
      let length = length - 1;
      return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
      var int value, x, y;
      var boolean isNegative;

      let isNegative = false;
      let value = 0;
      let x = 0;
      let y = 0;

//check if negative
      if (string[0] = 45){
        let isNegative = true;
        let string[0] = 48;
      }

      while (x < length){
        let y = string[x] - 48;
        if ((y < 0) | (y > 9)){
          return value;
        }
        let value = value * 10 + y;
        let x = x + 1;
      }

      if (isNegative){
        return -value;
      }
      return value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
      var int lastDigit, newDigit, c;

      if (val < 0){
        do appendChar(45);
        let val = -val;
      }

      let newDigit = val/10;
      let lastDigit = val - (newDigit * 10);
      let c = lastDigit + 48;

      if (val < 10){
        do appendChar(c);
      }else{
        do setInt(newDigit);
        do appendChar(c);
      }
      return;
    }

    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
