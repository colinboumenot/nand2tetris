// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
      let twoToThe = Array.new(16);
      let twoToThe[0] = 1;
      let twoToThe[1] = 2;
      let twoToThe[2] = 4;
      let twoToThe[3] = 8;
      let twoToThe[4] = 16;
      let twoToThe[5] = 32;
      let twoToThe[6] = 64;
      let twoToThe[7] = 128;
      let twoToThe[8] = 256;
      let twoToThe[9] = 512;
      let twoToThe[10] = 1024;
      let twoToThe[11] = 2048;
      let twoToThe[12] = 4096;
      let twoToThe[13] = 8192;
      let twoToThe[14] = 16384;
      let twoToThe[15] = 32767 + 1;
      return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      if (x > 0){
        return x;
      }
      return x * -1;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */

    function int multiply(int x, int y) {
      var int sum, shiftedX, counter;
      let sum = 0;
      let shiftedX = x;
      let counter = 0;

      while (counter < 16){
        if ((y & twoToThe[counter]) = twoToThe[counter]){
          let sum = sum + shiftedX;
        }
        let shiftedX = shiftedX + shiftedX;
        let counter = counter + 1;
      }
      return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
      var int quotient, result;
      var boolean negativeX, negativeY;

      let negativeX = x < 0;
      let negativeY = y < 0;
      let x = Math.abs(x);
      let y = Math.abs(y);

      if ((y > x) | (y < 0)) {
        return 0;
      }

      let quotient = Math.divide(x, y + y);

      if ((x - (2 * quotient * y)) < y){
        let result = quotient + quotient;
      } else {
        let result = quotient + quotient + 1;
      }

      if (negativeX = negativeY){
        return result;
      }
      return -result;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
      var int y, j, yPlus2, yPlus2Squared;
      let y = 0;
      let j = 7;
      while (j > -1){
        let yPlus2 = y + twoToThe[j];
        let yPlus2Squared = yPlus2 * yPlus2;
        if ((yPlus2Squared > 0) & ((yPlus2Squared < x) | (yPlus2Squared = x))){
          let y = yPlus2;
        }
        let j = j - 1;
      }
      return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
      if (a > b){
        return a;
      }
      return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
      if (a > b){
        return b;
      }
      return a;
    }

    function int twoPower(int power){
      return twoToThe[power];
    }
}
