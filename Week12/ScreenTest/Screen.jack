// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static boolean color;
    /** Initializes the Screen. */
    function void init() {
      let screen = 16384;
      let color = true;
      return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
      var int index;
      let index = 0;
      while (index < 8192){
        let screen[index] = false;
        let index = index + 1;
      }
      return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
      let color = b;
      return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
      var int address, mask;

      let address = (y * 32) + (x / 16);
      let mask = Math.twoPower(x & 15);

      if (color){
        let screen[address] = screen[address] | mask;
      }else{
        let screen[address] = screen[address] & ~mask;
      }
      return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
      var int dx, dy, i, j, temp, idy, jdx;
      let i = 0;
      let j = 0;

      if((x1 > x2) & (y1 > y2)){
        let temp = x1;
        let x1 = x2;
        let x2 = temp;
        let temp = y1;
        let y1 = y2;
        let y2 = y1;
      }
      if((y1 > x2) & (x1 < x2)){
        let temp = x1;
        let x1 = x2;
        let x2 = temp;
        let temp = y1;
        let y1 = y2;
        let y2 = y1;
      }
      let dx = x2 - x1;
      let dy = y2 - y1;
      if (dx = 0){
        do Screen.drawPixel(x1, y1);
        while(~(j = dy)){
          if (dy < 0){
            let j = j - 1;
          }else{
            let j = j + 1;
          }
          do Screen.drawPixel(x1, y1 + j);
        }
      }
      if (dy = 0){
        do Screen.drawPixel(x1, y1);
        while(~(i = dx)){
          if (dx < 0){
            let i = i - 1;
          }else{
            let i = i + 1;
          }
          do Screen.drawPixel(x1 + i, y1);
        }
      }
      if ((dx > 0) & (dy > 0)){
        let idy = 0;
        while(~(i > dx) & ~(j > dy)){
          do Screen.drawPixel(x1 + i, y1 + j);
          if (idy < 0){
            let i = i + 1;
            let idy = idy + dy;
          }else{
            let j = j + 1;
            let idy = idy - dx;
          }
        }
      }
      if ((dx < 0) & (dy > 0)){
        let jdx = 0;
        while(~(i < dx) & ~(j > dy)){
          do Screen.drawPixel(x1 + i, y1 + j);
          if (jdx > 0){
            let i = i - 1;
            let jdx = jdx - dy;
          }else{
            let j = j + 1;
            let jdx = jdx + dx;
          }
        }
      }
      return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
      var int dy;

      let dy = y1;
      do Screen.drawLine(x1, dy, x2, dy);
      while(~(dy = y2)){
        let dy = dy + 1;
        do Screen.drawLine(x1, dy, x2, dy);
      }
      return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
      var int dx, dy;
      var int radiusSquared;

      let dy = -r;
      let radiusSquared = r * r;
      while(~(dy > r)){
        let dx = Math.sqrt(radiusSquared - (dy * dy));
        do Screen.drawLine(x - dx, y + dy, x + dx, y + dy);
        let dy = dy + 1;
      }
      return;
    }
}
