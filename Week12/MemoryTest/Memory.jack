// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static int heapStart, heapEnd;
    static int freeList;
    /** Initializes the class. */
    function void init() {
      let ram = 0;
      let heapStart = 2048;
      let heapEnd = 16383;
      let freeList = heapStart + 2;
      let ram[freeList - 1] = heapEnd - heapStart - 2;
      let ram[freeList - 2] = -1;
      return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
      return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
      let ram[address] = value;
      return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
      var int pointer, newBlock, previousPointer;

      let pointer = freeList;
      let previousPointer = -1;

      while ((ram[pointer - 1] < size)){
        let previousPointer = pointer;
        let pointer = ram[pointer - 2];
      }
      if (ram[pointer - 1] > size + 2){
        if (previousPointer > -1){
          let newBlock = pointer + size + 2;
          let ram[previousPointer - 2] = newBlock;
          let ram[newBlock - 2] = ram[pointer - 2];
          let ram[newBlock - 1] = ram[pointer - 1] - (size + 2);
        }else{
          let freeList = pointer + size + 2;
          let ram[freeList - 1] = ram[pointer - 1] - (size + 2);
          let ram[freeList - 2] = ram[pointer - 2];
        }
      }else{
        if(previousPointer > -1){
          let ram[previousPointer - 2] = ram[pointer - 2];
        }else{
          let freeList = ram[pointer - 2];
        }
      }
      let ram[pointer - 1] = size;
      return pointer - 1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
      let ram[o-1] = freeList;
      let freeList = o + 1;
      return;
    }    
}
